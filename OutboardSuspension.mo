within VehicleDynamics_EB;

package OutboardSuspension
  model DoubleWishbone
    parameter Modelica.Units.SI.Position[3] ccUWBL2C = {0.3, 0.4, 0.4} "Upper wishbone, leading leg to chassis";
    parameter Modelica.Units.SI.Position[3] ccUWBT2C = {-0.3, 0.4, 0.4} "Upper wishbone, trailing leg to chassis";
    parameter Modelica.Units.SI.Position[3] ccUWB2UR = {-0.05, 0.7, 0.4} "Upper wishbone to upright";
    parameter Modelica.Units.SI.Position[3] ccLWBL2C = {0.3, 0.4, 0.2} "Lower wishbone, leading leg to chassis";
    parameter Modelica.Units.SI.Position[3] ccLWBT2C = {-0.3, 0.4, 0.2} "Lower wishbone, trailing leg to chassis";
    parameter Modelica.Units.SI.Position[3] ccLWB2UR = {0.05, 0.8, 0.2} "Lower wishbone to upright";
    parameter Modelica.Units.SI.Position[3] ccS2C = {0.3, 0.4, 0.25} "Steering to chassis";
    parameter Modelica.Units.SI.Position[3] ccS2UR = {0.2, 0.8, 0.25} "Steering to upright";
    parameter Modelica.Units.SI.Position[3] ccWC = {0.0, 1.0, 0.255} "Steering to upright";
    parameter Modelica.Units.SI.Mass mUnsprungMass = 25 "Unsprung mass";
    
    
    Modelica.Mechanics.MultiBody.Parts.FixedTranslation lowerArm(r = ccLWB2UR - (ccLWBL2C + ccLWBT2C)/2) annotation(
      Placement(visible = true, transformation(origin = {0, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Mechanics.MultiBody.Joints.Revolute lowerArmAxis(n = ccLWBL2C - ccLWBT2C) annotation(
      Placement(visible = true, transformation(origin = {-60, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Mechanics.MultiBody.Interfaces.Frame_a suspensionFrame annotation(
      Placement(visible = true, transformation(origin = {-200, -80}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {-200, -100}, extent = {{-40, -40}, {40, 40}}, rotation = 0)));
    Modelica.Mechanics.MultiBody.Interfaces.Frame_a steeringFrame annotation(
      Placement(visible = true, transformation(origin = {-200, 120}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {-200, 100}, extent = {{-40, -40}, {40, 40}}, rotation = 0)));
    Modelica.Mechanics.MultiBody.Joints.Assemblies.JointUSR upperArmAndKingPin(n1_a = {1, 0, 0}, n_b = ccUWBL2C - ccUWBT2C, rRod1_ia = ccUWB2UR - ccLWB2UR, rRod2_ib = ccUWB2UR - (ccUWBL2C + ccUWBT2C)/2) annotation(
      Placement(visible = true, transformation(origin = {80, -18}, extent = {{20, -20}, {-20, 20}}, rotation = -90)));
    Modelica.Mechanics.MultiBody.Joints.Assemblies.JointUSR steeringArm(n1_a = {1, 0, 0}, n_b = ccUWB2UR - ccLWB2UR, rRod1_ia = ccS2UR - ccS2C, rRod2_ib = ccS2UR - ccLWB2UR) annotation(
      Placement(visible = true, transformation(origin = {86, 120}, extent = {{-20, 20}, {20, -20}}, rotation = 0)));
    Modelica.Mechanics.MultiBody.Parts.FixedTranslation toUpperWishbone(animation = false, r = (ccUWBL2C + ccUWBT2C)/2) annotation(
      Placement(visible = true, transformation(origin = {-150, -24}, extent = {{-14, 14}, {14, -14}}, rotation = 90)));
    Modelica.Mechanics.MultiBody.Parts.FixedTranslation toLowerWishbone(animation = false, r = (ccLWBL2C + ccLWBT2C)/2) annotation(
      Placement(visible = true, transformation(origin = {-114, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Mechanics.MultiBody.Interfaces.Frame_b wheelFrame annotation(
      Placement(visible = true, transformation(origin = {200, 0}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {200, 0}, extent = {{-40, -40}, {40, 40}}, rotation = 0)));
    Modelica.Mechanics.MultiBody.Parts.Body unsprungMass(m = mUnsprungMass, r_CM = {0, 0, 0}) annotation(
      Placement(visible = true, transformation(origin = {176, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
    Modelica.Mechanics.MultiBody.Parts.FixedTranslation toWheelCentre(r = ccWC - ccLWB2UR) annotation(
      Placement(visible = true, transformation(origin = {102, 66}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  equation
    connect(lowerArmAxis.frame_b, lowerArm.frame_a) annotation(
      Line(points = {{-50, -80}, {-10, -80}}));
    connect(upperArmAndKingPin.frame_a, lowerArm.frame_b) annotation(
      Line(points = {{80, -38}, {80, -80}, {10, -80}}, color = {95, 95, 95}));
    connect(steeringFrame, steeringArm.frame_a) annotation(
      Line(points = {{-200, 120}, {66, 120}}));
    connect(steeringArm.frame_b, upperArmAndKingPin.frame_ia) annotation(
      Line(points = {{106, 120}, {138, 120}, {138, -34}, {100, -34}}));
    connect(toUpperWishbone.frame_a, suspensionFrame) annotation(
      Line(points = {{-150, -38}, {-150, -80}, {-200, -80}}, color = {95, 95, 95}));
    connect(toUpperWishbone.frame_b, upperArmAndKingPin.frame_b) annotation(
      Line(points = {{-150, -10}, {-150, 30}, {80, 30}, {80, 2}}, color = {95, 95, 95}));
    connect(toLowerWishbone.frame_a, suspensionFrame) annotation(
      Line(points = {{-124, -80}, {-200, -80}}, color = {95, 95, 95}));
    connect(toLowerWishbone.frame_b, lowerArmAxis.frame_a) annotation(
      Line(points = {{-104, -80}, {-70, -80}}, color = {95, 95, 95}));
  connect(toWheelCentre.frame_b, unsprungMass.frame_a) annotation(
      Line(points = {{102, 56}, {102, 28}, {176, 28}, {176, 50}}, color = {95, 95, 95}));
  connect(wheelFrame, unsprungMass.frame_a) annotation(
      Line(points = {{200, 0}, {176, 0}, {176, 50}}));
  connect(steeringArm.frame_ib, toWheelCentre.frame_a) annotation(
      Line(points = {{102, 100}, {102, 76}}, color = {95, 95, 95}));
    annotation(
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}}), graphics = {Bitmap(origin = {7, -12}, rotation = 180, extent = {{265, 140}, {-265, -140}}, imageSource = "")}));
  end DoubleWishbone;

  model DoubleWishbonePushrodToLowerWishbone
    extends VehicleDynamics_EB.OutboardSuspension.DoubleWishbone(unsprungMass.enforceStates = false);
    parameter Modelica.Units.SI.Position[3] ccPR2LWB = {0.0, 0.7, 0.2} "Pushrod to lower wishbone";
    parameter Modelica.Units.SI.Position[3] ccPR2R = {0.0, 0.4, 0.5} "Pushrod to rocker";
    parameter Modelica.Units.SI.Position[3] ccRockerAxis1 = {0.1, 0.4, 0.4} "Point defining rocker axis 1";
    parameter Modelica.Units.SI.Position[3] ccRockerAxis2 = {-0.1, 0.4, 0.4} "Point defining rocker axis 2";
    Modelica.Mechanics.MultiBody.Parts.FixedTranslation toPushrod(r = ccPR2LWB - (ccLWBL2C + ccLWBT2C)/2) annotation(
      Placement(visible = true, transformation(origin = {-30, -30}, extent = {{-14, 14}, {14, -14}}, rotation = 90)));
    Modelica.Mechanics.MultiBody.Joints.Assemblies.JointUSR pushrodAndRockerArm(n1_a = {1, 0, 0}, n_b = ccRockerAxis2 - ccRockerAxis1, rRod1_ia = ccPR2R - ccPR2LWB, rRod2_ib = ccPR2R - (ccRockerAxis1 + ccRockerAxis2)/2) annotation(
      Placement(visible = true, transformation(origin = {-80, 60}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
    Modelica.Mechanics.MultiBody.Parts.FixedTranslation toRockerAxis(animation = false, r = (ccRockerAxis1 + ccRockerAxis2)/2) annotation(
      Placement(visible = true, transformation(origin = {-180, -24}, extent = {{-14, 14}, {14, -14}}, rotation = 90)));
    Modelica.Mechanics.MultiBody.Interfaces.Frame_b rockerFrame annotation(
      Placement(visible = true, transformation(origin = {0, 200}, extent = {{-16, -16}, {16, 16}}, rotation = 90), iconTransformation(origin = {0, 200}, extent = {{-40, -40}, {40, 40}}, rotation = -90)));
  equation
    connect(pushrodAndRockerArm.frame_a, toPushrod.frame_b) annotation(
      Line(points = {{-60, 60}, {-30, 60}, {-30, -16}}));
    connect(toPushrod.frame_a, lowerArmAxis.frame_b) annotation(
      Line(points = {{-30, -44}, {-30, -80}, {-58, -80}}, color = {95, 95, 95}));
    connect(toRockerAxis.frame_b, pushrodAndRockerArm.frame_b) annotation(
      Line(points = {{-180, -10}, {-180, 60}, {-100, 60}}, color = {95, 95, 95}));
    connect(toRockerAxis.frame_a, suspensionFrame) annotation(
      Line(points = {{-180, -38}, {-180, -80}, {-200, -80}}, color = {95, 95, 95}));
    connect(pushrodAndRockerArm.frame_im, rockerFrame) annotation(
      Line(points = {{-80, 80}, {-80, 160}, {0, 160}, {0, 200}}, color = {95, 95, 95}));
    annotation(
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}}), graphics = {Text(origin = {0, 155}, textColor = {0, 0, 255}, extent = {{-120, 31}, {120, -31}}, textString = "%name"), Text(origin = {0, -177}, extent = {{-146, 83}, {146, -83}}, textString = "Pushrod to lower wishbone")}));
  end DoubleWishbonePushrodToLowerWishbone;
end OutboardSuspension;
